<!DOCTYPE html>
<html>
<head>
    <title><%= title %></title>
    <link rel='stylesheet' href='/stylesheets/style.css'/>
    <script src="/javascripts/infinitecanvas.js"></script>
</head>
<body>

  <a id="link" href="">start gesture scrolling</a>

 <script>
     // create the canvas element and append it to the document
     var canvas = document.createElement("canvas");
     var ctx = canvas.getContext("2d");
     document.body.appendChild(canvas);
     canvas.width = window.innerWidth;
     canvas.height = window.innerHeight;
     // Initialize the infinite canvas buffer underneath the context
     var inf_ctx = infiniteCanvas.initialize(ctx);
     // Prepare some variables for the dragging gestures logic
     var mouseIsDown = false;
     var middleOrRightIsDown = false;
     var previousMousePosition;
     canvas.addEventListener("mousedown", function (event) {
         // 1 is leftmousebutton, 2 is middle, 3 is left
         if (event.which === 1) {
             mouseIsDown = true;
         } else {
             middleOrRightIsDown = true;
         }
     });
     window.addEventListener("mouseup", function (event) {
         // When leftmousebutton is released, synchronise the newly
         // drawn scribbles to the underlying buffer chunks
         if (event.which === 1) {
             mouseIsDown = false;
             inf_ctx.updateChunks();
         } else {
             middleOrRightIsDown = false;
         }
     });
     window.addEventListener("mousemove", function (event) {
         var newMousePosition = {x: event.offsetX, y: event.offsetY};
         if (mouseIsDown) {
             // draw lines when dragging with the left mosue button
             if (previousMousePosition) {
                 ctx.beginPath();
                 ctx.moveTo(previousMousePosition.x, previousMousePosition.y);
                 ctx.lineTo(newMousePosition.x     , newMousePosition.y);
                 ctx.stroke();
             }
         } else if (middleOrRightIsDown) {
             // pan the canvas whenever dragging with the middle or right mouse button
             var dx = previousMousePosition.x - newMousePosition.x;
             var dy = previousMousePosition.y - newMousePosition.y;
             // Canvas gets really messy if you do not clear it up :)
             ctx.clearRect(0, 0, canvas.width, canvas.height);
             inf_ctx.moveBy(dx, dy);
         }
         previousMousePosition = newMousePosition;
     });
 </script>

 <script>
 var autoplay = function() {
   function getScripts(urls, callback) {
     var numDone = 0;

     function getScript(url, callback) {
       var script = document.createElement('script'),
           head = document.getElementsByTagName('head')[0],
           done = false;

         script.src = url;
         script.onload = script.onreadystatechange = function() {
           if (!done && (!this.readyState || this.readyState == 'loaded' || this.readyState == 'complete')) {
             done = true;
             callback();
             script.onload = script.onreadystatechange = null;
             head.removeChild(script);
           }
         };

       head.appendChild(script);
     }

     function getScriptCallback() {
       if (urls.length > 0) getScript(urls.shift(), getScriptCallback);
       else callback();
     }

     getScript(urls.shift(), getScriptCallback);
   }

   getScripts([
     '//mtschirs.github.io/js-objectdetect/examples/js/compatibility.js',
     '//mtschirs.github.io/js-objectdetect/js/objectdetect.js',
     '//mtschirs.github.io/js-objectdetect/js/objectdetect.handfist.js',
     '//mtschirs.github.io/js-objectdetect/examples/js/jquery.js'],

     function() {
       var canvas = $('<canvas style="position: fixed; z-index: 1001;top: 10px; right: 10px; opacity: 0.9">').get(0),
         context = canvas.getContext('2d'),
         video = document.createElement('video'),
         fist_pos_old,
         detector;

       document.getElementsByTagName('body')[0].appendChild(canvas);

       try {
         compatibility.getUserMedia({video: true}, function(stream) {
           try {
             video.src = compatibility.URL.createObjectURL(stream);
           } catch (error) {
             video.src = stream;
           }
           compatibility.requestAnimationFrame(play);
         }, function (error) {
           alert("WebRTC not available");
         });
       } catch (error) {
         alert(error);
       }

       function play() {
         compatibility.requestAnimationFrame(play);
         if (video.paused) video.play();

         if (video.readyState === video.HAVE_ENOUGH_DATA && video.videoWidth > 0) {

           /* Prepare the detector once the video dimensions are known: */
                 if (!detector) {
                 var width = ~~(80 * video.videoWidth / video.videoHeight);
             var height = 80;
                 detector = new objectdetect.detector(width, height, 1.1, objectdetect.handfist);
               }

           /* Draw video overlay: */
           canvas.width = ~~(100 * video.videoWidth / video.videoHeight);
           canvas.height = 100;
           context.drawImage(video, 0, 0, canvas.clientWidth, canvas.clientHeight);

           var coords = detector.detect(video, 1);
           if (coords[0]) {
             var coord = coords[0];

             /* Rescale coordinates from detector to video coordinate space: */
             coord[0] *= video.videoWidth / detector.canvas.width;
             coord[1] *= video.videoHeight / detector.canvas.height;
             coord[2] *= video.videoWidth / detector.canvas.width;
             coord[3] *= video.videoHeight / detector.canvas.height;

             /* Find coordinates with maximum confidence: */
             var coord = coords[0];
             for (var i = coords.length - 1; i >= 0; --i)
               if (coords[i][4] > coord[4]) coord = coords[i];

             /* Scroll window: */
             var fist_pos = [coord[0] + coord[2] / 2, coord[1] + coord[3] / 2];
             if (fist_pos_old) {
               var dx = (fist_pos[0] - fist_pos_old[0]) / video.videoWidth,
                   dy = (fist_pos[1] - fist_pos_old[1]) / video.videoHeight;

                 window.scrollBy(dx * 200, dy * 200);
             } else fist_pos_old = fist_pos;

             /* Draw coordinates on video overlay: */
             context.beginPath();
             context.lineWidth = '2';
             context.fillStyle = 'rgba(0, 255, 255, 0.5)';
             context.fillRect(
               coord[0] / video.videoWidth * canvas.clientWidth,
               coord[1] / video.videoHeight * canvas.clientHeight,
               coord[2] / video.videoWidth * canvas.clientWidth,
               coord[3] / video.videoHeight * canvas.clientHeight);
             context.stroke();
           } else fist_pos_old = null;
         }
       }
     }
   );
 };
 document.getElementById('link').href = 'javascript:(' + autoplay.toString() + ')()';
   </script>
</body>
</html>
